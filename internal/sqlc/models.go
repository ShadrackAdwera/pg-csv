// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0

package internal

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

type EOrderPriority string

const (
	EOrderPriorityC EOrderPriority = "C"
	EOrderPriorityH EOrderPriority = "H"
	EOrderPriorityM EOrderPriority = "M"
	EOrderPriorityL EOrderPriority = "L"
)

func (e *EOrderPriority) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EOrderPriority(s)
	case string:
		*e = EOrderPriority(s)
	default:
		return fmt.Errorf("unsupported scan type for EOrderPriority: %T", src)
	}
	return nil
}

type NullEOrderPriority struct {
	EOrderPriority EOrderPriority `json:"e_order_priority"`
	Valid          bool           `json:"valid"` // Valid is true if EOrderPriority is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEOrderPriority) Scan(value interface{}) error {
	if value == nil {
		ns.EOrderPriority, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EOrderPriority.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEOrderPriority) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EOrderPriority), nil
}

type ESalesChannel string

const (
	ESalesChannelOffline ESalesChannel = "Offline"
	ESalesChannelOnline  ESalesChannel = "Online"
)

func (e *ESalesChannel) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ESalesChannel(s)
	case string:
		*e = ESalesChannel(s)
	default:
		return fmt.Errorf("unsupported scan type for ESalesChannel: %T", src)
	}
	return nil
}

type NullESalesChannel struct {
	ESalesChannel ESalesChannel `json:"e_sales_channel"`
	Valid         bool          `json:"valid"` // Valid is true if ESalesChannel is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullESalesChannel) Scan(value interface{}) error {
	if value == nil {
		ns.ESalesChannel, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ESalesChannel.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullESalesChannel) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ESalesChannel), nil
}

type Sale struct {
	ID            int64          `json:"id"`
	Region        string         `json:"region"`
	Country       string         `json:"country"`
	ItemType      string         `json:"item_type"`
	SalesChannel  ESalesChannel  `json:"sales_channel"`
	OrderPriority EOrderPriority `json:"order_priority"`
	OrderDate     time.Time      `json:"order_date"`
	OrderID       int64          `json:"order_id"`
	ShipDate      time.Time      `json:"ship_date"`
	UnitsSold     int32          `json:"units_sold"`
	UnitPrice     float32        `json:"unit_price"`
	UnitCost      float32        `json:"unit_cost"`
	TotalRevenue  pgtype.Numeric `json:"total_revenue"`
	TotalCost     pgtype.Numeric `json:"total_cost"`
	TotalProfit   pgtype.Numeric `json:"total_profit"`
	CreatedAt     time.Time      `json:"created_at"`
}
